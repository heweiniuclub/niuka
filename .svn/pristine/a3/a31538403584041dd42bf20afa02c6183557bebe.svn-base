<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--      
	This file is automatically generated by autoCode(https://git.oschina.net/durcframework/autoCode)
-->
<mapper namespace="com.niuka.store.dao.CustomerStoreStockLogDao">
	<resultMap id="queryResultMap" type="com.niuka.store.model.CustomerStoreStockLog">
		<!-- 流水号 -->
		<result column="id" property="id" jdbcType="INTEGER"/>
		<!-- 创建时间 -->
		<result column="createtime" property="createtime" jdbcType="TIMESTAMP"/>
		<!-- 最后一次更新时间 -->
		<result column="modified_time" property="modifiedTime" jdbcType="TIMESTAMP"/>
		<!-- 客户ID -->
		<result column="customer_id" property="customerId" jdbcType="INTEGER"/>
		<!-- 操作人ID -->
		<result column="customer_staff_id" property="customerStaffId" jdbcType="INTEGER"/>
		<!-- 出入库数量 -->
		<result column="stock_count" property="stockCount" jdbcType="INTEGER"/>
		<!-- 出入库时价格 -->
		<result column="prime_costs" property="primeCosts" jdbcType="DECIMAL"/>
		<!-- 出入库单号 -->
		<result column="stock_number" property="stockNumber" jdbcType="VARCHAR"/>
		<!-- 库存记录类型(0入库 1出库) -->
		<result column="stock_type" property="stockType" jdbcType="TINYINT"/>
		<!-- 总金额 -->
		<result column="total_amount" property="totalAmount" jdbcType="DECIMAL"/>
		<!-- 产品单位 -->
		<result column="unit" property="unit" jdbcType="CHAR"/>
		<!-- 客户库存ID -->
		<result column="customer_stock_id" property="customerStockId" jdbcType="INTEGER"/>
		<!-- 产品库ID -->
		<result column="commodity_id" property="commodityId" jdbcType="INTEGER"/>
		<!-- 客户产品批次ID -->
		<result column="customer_commodity_batch_id" property="customerCommodityBatchId" jdbcType="INTEGER"/>
	</resultMap>

	<!-- 保存,保存全部字段 -->
	<insert id="insert" parameterType="com.niuka.store.model.CustomerStoreStockLog" keyProperty="id" keyColumn="id" useGeneratedKeys="true">INSERT INTO customer_store_stock_log ( `createtime` , `modified_time` , `customer_id` , `customer_staff_id` , `stock_count` , `prime_costs` , `stock_number` , `stock_type` , `total_amount` , `unit` , `customer_stock_id` , `commodity_id` , `customer_commodity_batch_id` ) VALUES ( #{createtime,jdbcType=TIMESTAMP} , #{modifiedTime,jdbcType=TIMESTAMP} , #{customerId,jdbcType=INTEGER} , #{customerStaffId,jdbcType=INTEGER} , #{stockCount,jdbcType=INTEGER} , #{primeCosts,jdbcType=DECIMAL} , #{stockNumber,jdbcType=VARCHAR} , #{stockType,jdbcType=TINYINT} , #{totalAmount,jdbcType=DECIMAL} , #{unit,jdbcType=CHAR} , #{customerStockId,jdbcType=INTEGER} , #{commodityId,jdbcType=INTEGER} , #{customerCommodityBatchId,jdbcType=INTEGER} )</insert>
	<!-- 根据主键获取单条记录 -->
	<select id="get" resultMap="queryResultMap" parameterType="com.niuka.store.model.CustomerStoreStockLog">SELECT t.id , t.createtime , t.modified_time , t.customer_id , t.customer_staff_id , t.stock_count , t.prime_costs , t.stock_number , t.stock_type , t.total_amount , t.unit , t.customer_stock_id , t.commodity_id , t.customer_commodity_batch_id FROM customer_store_stock_log t WHERE id = #{id,jdbcType=INTEGER}</select>
	<!-- 更新,更新全部字段 -->
	<update id="update" parameterType="com.niuka.store.model.CustomerStoreStockLog">UPDATE customer_store_stock_log
		<set>createtime=#{createtime,jdbcType=TIMESTAMP}, modified_time=#{modifiedTime,jdbcType=TIMESTAMP}, customer_id=#{customerId,jdbcType=INTEGER}, customer_staff_id=#{customerStaffId,jdbcType=INTEGER}, stock_count=#{stockCount,jdbcType=INTEGER}, prime_costs=#{primeCosts,jdbcType=DECIMAL}, stock_number=#{stockNumber,jdbcType=VARCHAR}, stock_type=#{stockType,jdbcType=TINYINT}, total_amount=#{totalAmount,jdbcType=DECIMAL}, unit=#{unit,jdbcType=CHAR}, customer_stock_id=#{customerStockId,jdbcType=INTEGER}, commodity_id=#{commodityId,jdbcType=INTEGER}, customer_commodity_batch_id=#{customerCommodityBatchId,jdbcType=INTEGER},</set> WHERE id = #{id,jdbcType=INTEGER}
	</update>
	<delete id="deleteById" parameterType="list" statementType="PREPARED">DELETE FROM customer_store_stock_log 
		<choose>
			<when test="list == null or list.size() == 0">WHERE 1 != 1</when>
			<when test="list.size() == 1">WHERE `id` = 
				<foreach collection="list" item="id">#{id}</foreach> 
			</when>
			<otherwise>WHERE `id` in 
				<foreach collection="list" item="id" open="(" separator="," close=")">#{id}</foreach>
			</otherwise>
		</choose> 
	</delete>
</mapper>
