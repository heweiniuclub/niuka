<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--      
	This file is automatically generated by autoCode(https://git.oschina.net/durcframework/autoCode)
-->
<mapper namespace="com.niuka.store.dao.CustomerStorePurchaseLogDao">
	<resultMap id="queryResultMap" type="com.niuka.store.model.CustomerStorePurchaseLog">
		<!-- 流水号 -->
		<result column="id" property="id" jdbcType="INTEGER"/>
		<!-- 门店编号 -->
		<result column="store_no" property="storeNo" jdbcType="VARCHAR"/>
		<!-- 创建时间 -->
		<result column="createtime" property="createtime" jdbcType="TIMESTAMP"/>
		<!-- 最后一次更新时间 -->
		<result column="modified_time" property="modifiedTime" jdbcType="TIMESTAMP"/>
		<!-- 采购编号 -->
		<result column="store_purchase_no" property="storePurchaseNo" jdbcType="INTEGER"/>
		<!-- 门店ID -->
		<result column="customer_store_id" property="customerStoreId" jdbcType="INTEGER"/>
		<!-- 客户ID -->
		<result column="customer_id" property="customerId" jdbcType="INTEGER"/>
		<!-- 客户员工ID -->
		<result column="customer_staff_id" property="customerStaffId" jdbcType="INTEGER"/>
		<!-- 采购总金额 -->
		<result column="total_commodity_amount" property="totalCommodityAmount" jdbcType="DECIMAL"/>
		<!-- 是否需要验单(0不需要 1需要) -->
		<result column="is_check_purchase" property="isCheckPurchase" jdbcType="TINYINT"/>
		<!-- 验单员ID -->
		<result column="customer_staff_check_id" property="customerStaffCheckId" jdbcType="INTEGER"/>
		<!-- 验单时间 -->
		<result column="check_time" property="checkTime" jdbcType="TIMESTAMP"/>
		<!-- 验单备注 -->
		<result column="check_remarks" property="checkRemarks" jdbcType="VARCHAR"/>
		<!-- 验单状态(0通过 1拒绝 2 未验单) -->
		<result column="check_status" property="checkStatus" jdbcType="TINYINT"/>
	</resultMap>

	<!-- 保存,保存全部字段 -->
	<insert id="insert" parameterType="com.niuka.store.model.CustomerStorePurchaseLog" keyProperty="id" keyColumn="id" useGeneratedKeys="true">INSERT INTO customer_store_purchase_log ( `store_no` , `createtime` , `modified_time` , `store_purchase_no` , `customer_store_id` , `customer_id` , `customer_staff_id` , `total_commodity_amount` , `is_check_purchase` , `customer_staff_check_id` , `check_time` , `check_remarks` , `check_status` ) VALUES ( #{storeNo,jdbcType=VARCHAR} , #{createtime,jdbcType=TIMESTAMP} , #{modifiedTime,jdbcType=TIMESTAMP} , #{storePurchaseNo,jdbcType=INTEGER} , #{customerStoreId,jdbcType=INTEGER} , #{customerId,jdbcType=INTEGER} , #{customerStaffId,jdbcType=INTEGER} , #{totalCommodityAmount,jdbcType=DECIMAL} , #{isCheckPurchase,jdbcType=TINYINT} , #{customerStaffCheckId,jdbcType=INTEGER} , #{checkTime,jdbcType=TIMESTAMP} , #{checkRemarks,jdbcType=VARCHAR} , #{checkStatus,jdbcType=TINYINT} )</insert>
	<!-- 根据主键获取单条记录 -->
	<select id="get" resultMap="queryResultMap" parameterType="com.niuka.store.model.CustomerStorePurchaseLog">SELECT t.id , t.store_no , t.createtime , t.modified_time , t.store_purchase_no , t.customer_store_id , t.customer_id , t.customer_staff_id , t.total_commodity_amount , t.is_check_purchase , t.customer_staff_check_id , t.check_time , t.check_remarks , t.check_status FROM customer_store_purchase_log t WHERE id = #{id,jdbcType=INTEGER}</select>
	<!-- 更新,更新全部字段 -->
	<update id="update" parameterType="com.niuka.store.model.CustomerStorePurchaseLog">UPDATE customer_store_purchase_log
		<set>store_no=#{storeNo,jdbcType=VARCHAR}, createtime=#{createtime,jdbcType=TIMESTAMP}, modified_time=#{modifiedTime,jdbcType=TIMESTAMP}, store_purchase_no=#{storePurchaseNo,jdbcType=INTEGER}, customer_store_id=#{customerStoreId,jdbcType=INTEGER}, customer_id=#{customerId,jdbcType=INTEGER}, customer_staff_id=#{customerStaffId,jdbcType=INTEGER}, total_commodity_amount=#{totalCommodityAmount,jdbcType=DECIMAL}, is_check_purchase=#{isCheckPurchase,jdbcType=TINYINT}, customer_staff_check_id=#{customerStaffCheckId,jdbcType=INTEGER}, check_time=#{checkTime,jdbcType=TIMESTAMP}, check_remarks=#{checkRemarks,jdbcType=VARCHAR}, check_status=#{checkStatus,jdbcType=TINYINT},</set> WHERE id = #{id,jdbcType=INTEGER}
	</update>
	<delete id="deleteById" parameterType="list" statementType="PREPARED">DELETE FROM customer_store_purchase_log 
		<choose>
			<when test="list == null or list.size() == 0">WHERE 1 != 1</when>
			<when test="list.size() == 1">WHERE `id` = 
				<foreach collection="list" item="id">#{id}</foreach> 
			</when>
			<otherwise>WHERE `id` in 
				<foreach collection="list" item="id" open="(" separator="," close=")">#{id}</foreach>
			</otherwise>
		</choose> 
	</delete>
</mapper>
