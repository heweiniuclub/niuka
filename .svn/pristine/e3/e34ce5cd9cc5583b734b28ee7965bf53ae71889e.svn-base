package com.niuka.customer.service.api;

import com.niuka.common.exception.DaoException;
import com.niuka.common.service.mybatis.impl.ServiceImpl;
import com.niuka.customer.dao.api.CustomerMapper;
import com.niuka.customer.dao.api.CustomerUserMapper;
import com.niuka.customer.model.Customer;
import com.niuka.customer.model.CustomerUser;
import com.niuka.customer.rpc.api.CustomerApiService;
import com.niuka.customer.rpc.api.CustomerUserApiService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service("customerUserapiservice")
public class CustomerUserApiServiceImpl extends ServiceImpl<CustomerUserMapper, CustomerUser, Integer> implements CustomerUserApiService {

	@Autowired
	public void setDao(CustomerUserMapper dao) {
		this.dao = dao;
	}

	@Override
	@Transactional(rollbackFor = DaoException.class)
	public Integer addCustomerUser(CustomerUser customerUser) throws DaoException {
		return dao.insert(customerUser);
	}

	@Override
	@Transactional(rollbackFor = DaoException.class)
	public void updateUserPwdByAccount(String username, Integer customerId, String password) throws DaoException {
		 dao.updateUserPwdByAccount(username, customerId, password);
	}

	@Override
	public CustomerUser findCustomerUserByUserIdAndCustomerId(String userId, Integer customerId) {
		return dao.findCustomerUserByUserIdAndCustomerId(userId, customerId);
	}

	@Override
	public CustomerUser queryUserByOpenId(String openId) {
		return dao.queryUserByOpenId(openId);
	}

	@Override
	@Transactional(rollbackFor = DaoException.class)
	public void updateOpenIdByAccountAndCustomerId(String userName, Integer customerId, String openId) throws DaoException {
		dao.updateOpenIdByAccountAndCustomerId(userName, customerId, openId);
	}

}
