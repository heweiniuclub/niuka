<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--      
	This file is automatically generated by autoCode(https://git.oschina.net/durcframework/autoCode)
-->
<mapper namespace="com.niuka.store.dao.CustomerStorePurchaseDetailDao">
	<resultMap id="queryResultMap" type="com.niuka.store.model.CustomerStorePurchaseDetail">
		<!-- 流水号 -->
		<result column="id" property="id" jdbcType="INTEGER"/>
		<!-- 创建时间 -->
		<result column="createtime" property="createtime" jdbcType="TIMESTAMP"/>
		<!-- 最后一次更新时间 -->
		<result column="modified_time" property="modifiedTime" jdbcType="TIMESTAMP"/>
		<!-- 客户产品ID -->
		<result column="customer_commodity_id" property="customerCommodityId" jdbcType="INTEGER"/>
		<!-- 门店采购记录ID -->
		<result column="customer_store_purchase_log_id" property="customerStorePurchaseLogId" jdbcType="INTEGER"/>
		<!-- 门店采购编号 -->
		<result column="purchase_no" property="purchaseNo" jdbcType="INTEGER"/>
		<!-- 客户库存ID -->
		<result column="customer_stock" property="customerStock" jdbcType="INTEGER"/>
		<!-- 采购数量 -->
		<result column="purchase_num" property="purchaseNum" jdbcType="INTEGER"/>
		<!-- 采购总金额 -->
		<result column="total_amount" property="totalAmount" jdbcType="DECIMAL"/>
	</resultMap>

	<!-- 保存,保存全部字段 -->
	<insert id="insert" parameterType="com.niuka.store.model.CustomerStorePurchaseDetail" keyProperty="id" keyColumn="id" useGeneratedKeys="true">INSERT INTO customer_store_purchase_detail ( `createtime` , `modified_time` , `customer_commodity_id` , `customer_store_purchase_log_id` , `purchase_no` , `customer_stock` , `purchase_num` , `total_amount` ) VALUES ( #{createtime,jdbcType=TIMESTAMP} , #{modifiedTime,jdbcType=TIMESTAMP} , #{customerCommodityId,jdbcType=INTEGER} , #{customerStorePurchaseLogId,jdbcType=INTEGER} , #{purchaseNo,jdbcType=INTEGER} , #{customerStock,jdbcType=INTEGER} , #{purchaseNum,jdbcType=INTEGER} , #{totalAmount,jdbcType=DECIMAL} )</insert>
	<!-- 根据主键获取单条记录 -->
	<select id="get" resultMap="queryResultMap" parameterType="com.niuka.store.model.CustomerStorePurchaseDetail">SELECT t.id , t.createtime , t.modified_time , t.customer_commodity_id , t.customer_store_purchase_log_id , t.purchase_no , t.customer_stock , t.purchase_num , t.total_amount FROM customer_store_purchase_detail t WHERE id = #{id,jdbcType=INTEGER}</select>
	<!-- 更新,更新全部字段 -->
	<update id="update" parameterType="com.niuka.store.model.CustomerStorePurchaseDetail">UPDATE customer_store_purchase_detail
		<set>createtime=#{createtime,jdbcType=TIMESTAMP}, modified_time=#{modifiedTime,jdbcType=TIMESTAMP}, customer_commodity_id=#{customerCommodityId,jdbcType=INTEGER}, customer_store_purchase_log_id=#{customerStorePurchaseLogId,jdbcType=INTEGER}, purchase_no=#{purchaseNo,jdbcType=INTEGER}, customer_stock=#{customerStock,jdbcType=INTEGER}, purchase_num=#{purchaseNum,jdbcType=INTEGER}, total_amount=#{totalAmount,jdbcType=DECIMAL},</set> WHERE id = #{id,jdbcType=INTEGER}
	</update>
	<delete id="deleteById" parameterType="list" statementType="PREPARED">DELETE FROM customer_store_purchase_detail 
		<choose>
			<when test="list == null or list.size() == 0">WHERE 1 != 1</when>
			<when test="list.size() == 1">WHERE `id` = 
				<foreach collection="list" item="id">#{id}</foreach> 
			</when>
			<otherwise>WHERE `id` in 
				<foreach collection="list" item="id" open="(" separator="," close=")">#{id}</foreach>
			</otherwise>
		</choose> 
	</delete>
</mapper>
