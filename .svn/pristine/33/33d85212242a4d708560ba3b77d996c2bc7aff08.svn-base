<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--      
	This file is automatically generated by autoCode(https://git.oschina.net/durcframework/autoCode)
-->
<mapper namespace="com.niuka.store.dao.CustomerStoreStockDao">
	<resultMap id="queryResultMap" type="com.niuka.store.model.CustomerStoreStock">
		<!-- 流水号 -->
		<result column="id" property="id" jdbcType="INTEGER"/>
		<!-- 门店编号 -->
		<result column="store_no" property="storeNo" jdbcType="VARCHAR"/>
		<!-- 创建时间 -->
		<result column="createtime" property="createtime" jdbcType="TIMESTAMP"/>
		<!-- 最后一次更新时间 -->
		<result column="modified_time" property="modifiedTime" jdbcType="TIMESTAMP"/>
		<!-- 产品库ID -->
		<result column="commodity_id" property="commodityId" jdbcType="INTEGER"/>
		<!-- 客户ID -->
		<result column="customer_id" property="customerId" jdbcType="INTEGER"/>
		<!-- 门店ID -->
		<result column="customer_store_id" property="customerStoreId" jdbcType="INTEGER"/>
		<!-- 客户库存ID -->
		<result column="customer_stock" property="customerStock" jdbcType="INTEGER"/>
		<!-- 库存预警值 -->
		<result column="stock_warning_value" property="stockWarningValue" jdbcType="INTEGER"/>
		<!-- 产品条形码 -->
		<result column="bar_code" property="barCode" jdbcType="VARCHAR"/>
		<!-- 产品单位 -->
		<result column="unit" property="unit" jdbcType="CHAR"/>
		<!-- 商品库存 -->
		<result column="store_actual_stock" property="storeActualStock" jdbcType="INTEGER"/>
		<!-- 总金额 -->
		<result column="total_amount" property="totalAmount" jdbcType="DECIMAL"/>
		<!-- 门店历史库存 -->
		<result column="store_history_stock" property="storeHistoryStock" jdbcType="INTEGER"/>
		<!-- 门店异常库存 -->
		<result column="store_exception_stock" property="storeExceptionStock" jdbcType="INTEGER"/>
	</resultMap>

	<!-- 保存,保存全部字段 -->
	<insert id="insert" parameterType="com.niuka.store.model.CustomerStoreStock" keyProperty="id" keyColumn="id" useGeneratedKeys="true">INSERT INTO customer_store_stock ( `store_no` , `createtime` , `modified_time` , `commodity_id` , `customer_id` , `customer_store_id` , `customer_stock` , `stock_warning_value` , `bar_code` , `unit` , `store_actual_stock` , `total_amount` , `store_history_stock` , `store_exception_stock` ) VALUES ( #{storeNo,jdbcType=VARCHAR} , #{createtime,jdbcType=TIMESTAMP} , #{modifiedTime,jdbcType=TIMESTAMP} , #{commodityId,jdbcType=INTEGER} , #{customerId,jdbcType=INTEGER} , #{customerStoreId,jdbcType=INTEGER} , #{customerStock,jdbcType=INTEGER} , #{stockWarningValue,jdbcType=INTEGER} , #{barCode,jdbcType=VARCHAR} , #{unit,jdbcType=CHAR} , #{storeActualStock,jdbcType=INTEGER} , #{totalAmount,jdbcType=DECIMAL} , #{storeHistoryStock,jdbcType=INTEGER} , #{storeExceptionStock,jdbcType=INTEGER} )</insert>
	<!-- 根据主键获取单条记录 -->
	<select id="get" resultMap="queryResultMap" parameterType="com.niuka.store.model.CustomerStoreStock">SELECT t.id , t.store_no , t.createtime , t.modified_time , t.commodity_id , t.customer_id , t.customer_store_id , t.customer_stock , t.stock_warning_value , t.bar_code , t.unit , t.store_actual_stock , t.total_amount , t.store_history_stock , t.store_exception_stock FROM customer_store_stock t WHERE id = #{id,jdbcType=INTEGER}</select>
	<!-- 更新,更新全部字段 -->
	<update id="update" parameterType="com.niuka.store.model.CustomerStoreStock">UPDATE customer_store_stock
		<set>store_no=#{storeNo,jdbcType=VARCHAR}, createtime=#{createtime,jdbcType=TIMESTAMP}, modified_time=#{modifiedTime,jdbcType=TIMESTAMP}, commodity_id=#{commodityId,jdbcType=INTEGER}, customer_id=#{customerId,jdbcType=INTEGER}, customer_store_id=#{customerStoreId,jdbcType=INTEGER}, customer_stock=#{customerStock,jdbcType=INTEGER}, stock_warning_value=#{stockWarningValue,jdbcType=INTEGER}, bar_code=#{barCode,jdbcType=VARCHAR}, unit=#{unit,jdbcType=CHAR}, store_actual_stock=#{storeActualStock,jdbcType=INTEGER}, total_amount=#{totalAmount,jdbcType=DECIMAL}, store_history_stock=#{storeHistoryStock,jdbcType=INTEGER}, store_exception_stock=#{storeExceptionStock,jdbcType=INTEGER},</set> WHERE id = #{id,jdbcType=INTEGER}
	</update>
	<delete id="deleteById" parameterType="list" statementType="PREPARED">DELETE FROM customer_store_stock 
		<choose>
			<when test="list == null or list.size() == 0">WHERE 1 != 1</when>
			<when test="list.size() == 1">WHERE `id` = 
				<foreach collection="list" item="id">#{id}</foreach> 
			</when>
			<otherwise>WHERE `id` in 
				<foreach collection="list" item="id" open="(" separator="," close=")">#{id}</foreach>
			</otherwise>
		</choose> 
	</delete>
</mapper>
